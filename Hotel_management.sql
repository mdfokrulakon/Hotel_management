DROP TABLE users CASCADE CONSTRAINTS;
DROP TABLE Customer CASCADE CONSTRAINTS;
DROP TABLE Customer_Address CASCADE CONSTRAINTS;
DROP TABLE Room CASCADE CONSTRAINTS;
DROP TABLE Booking CASCADE CONSTRAINTS;
DROP TABLE Food CASCADE CONSTRAINTS;
DROP TABLE Food_Order CASCADE CONSTRAINTS;
DROP TABLE Housekeeper CASCADE CONSTRAINTS;
DROP TABLE Maintenance_Request CASCADE CONSTRAINTS;
DROP TABLE Manager CASCADE CONSTRAINTS;
DROP TABLE Receptionist CASCADE CONSTRAINTS;
DROP TABLE Department CASCADE CONSTRAINTS;
DROP TABLE Staff CASCADE CONSTRAINTS;
DROP TABLE Payment CASCADE CONSTRAINTS;
DROP TABLE Cancel_Booking CASCADE CONSTRAINTS;
DROP TABLE Customer_Review CASCADE CONSTRAINTS;
DROP TRIGGER trg_prevent_double_booking;
DROP TRIGGER trg_confirm_booking_status;
DROP TRIGGER trg_reset_room_status_on_cancel;
DROP TRIGGER trg_reset_room_status_on_checkout;
DROP TRIGGER trg_handle_food_order;
DROP TRIGGER trg_calculate_refund;

-- 0. Users
CREATE TABLE users (
user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
user_name VARCHAR2(100) NOT NULL,
user_pass VARCHAR2(32) NOT NULL,
user_role VARCHAR2(38) NOT NULL,
user_activated number default 0

);

-- 1. Customer
CREATE TABLE Customer (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    phone_number VARCHAR2(20),
    national_id VARCHAR2(50),
    passport_number VARCHAR2(50),
    email VARCHAR2(100)
    
);

-- 2. Customer_Address
CREATE TABLE Customer_Address (
    address_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER,
    street VARCHAR2(100),
    city VARCHAR2(50),
    state VARCHAR2(50),
    country VARCHAR2(50),
    postal_code VARCHAR2(10),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)
);

-- 3. Room
CREATE TABLE Room (
    room_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_number VARCHAR2(10),
    room_type VARCHAR2(20),
    price NUMBER(10,2),
    capacity NUMBER,
    room_status VARCHAR2(20) DEFAULT 'Available' -- Available, Pending, Confirmed
);


-- 4. Booking
CREATE TABLE Booking (
    booking_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER REFERENCES Customer(customer_id),
    room_id NUMBER REFERENCES Room(room_id),
    booking_date DATE,
    check_in_date DATE,
    check_out_date DATE,
    booking_status VARCHAR2(50)
);


-- 5. Food
CREATE TABLE Food (
    food_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    food_name VARCHAR2(100),
    price NUMBER(10,2),
    is_available CHAR(1) CHECK (is_available IN ('Y', 'N')),
    quantity NUMBER
);

-- 6.Food_Order
CREATE TABLE Food_Order (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER REFERENCES Customer(customer_id),
    room_id NUMBER REFERENCES Room(room_id),
    food_id NUMBER REFERENCES Food(food_id),
    quantity NUMBER,
    total_price NUMBER(10, 2)
);


-- 7. Housekeeper
CREATE TABLE Housekeeper (
    housekeeper_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    room_id NUMBER,
    department_id NUMBER,
    phone_number VARCHAR2(15),
    email VARCHAR2(100),
    role VARCHAR2(50),
    cleaning_time TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES Room(room_id),
    FOREIGN KEY (department_id) REFERENCES Department(department_id)
);

-- 8. Maintenance_Request
CREATE TABLE Maintenance_Request (
    request_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER,
    room_id NUMBER,
    description VARCHAR2(500),
    request_date TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (room_id) REFERENCES Room(room_id)
);

-- 9. Manager
CREATE TABLE Manager (
    manager_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    department_id NUMBER,
    role VARCHAR2(50),
    duty_time TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES Department(department_id)
);

-- 10. Receptionist
CREATE TABLE Receptionist (
    receptionist_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    duty_time TIMESTAMP,
    department_id NUMBER,
    FOREIGN KEY (department_id) REFERENCES Department(department_id)
);

-- 11. Department
CREATE TABLE Department (
    department_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    department_name VARCHAR2(100)
);

-- 12. Staff
CREATE TABLE Staff (
    staff_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    phone_number VARCHAR2(15),
    email VARCHAR2(100),
    department_id NUMBER,
    role VARCHAR2(50),
    FOREIGN KEY (department_id) REFERENCES Department(department_id)
);

-- 13. Payment
CREATE TABLE Payment (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    booking_id NUMBER REFERENCES Booking(booking_id),
    customer_id NUMBER REFERENCES Customer(customer_id),
    payment_type VARCHAR2(20),     -- online/offline
    method VARCHAR2(20),           -- cash/card
    gateway VARCHAR2(30),          -- Visa/Mastercard/Bkash/Nagad/etc
    transaction_id VARCHAR2(50),
    payment_date TIMESTAMP,
    amount NUMBER(10, 2)
);

-- 14. Cancel_Booking
CREATE TABLE Cancel_Booking (
    cancel_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    booking_id NUMBER REFERENCES Booking(booking_id),
    cancel_date DATE,
    cancel_time TIMESTAMP,
    cancel_reason VARCHAR2(255),
    refund_amount NUMBER(10,2)
);

-- 15. Customer_Review
CREATE TABLE Customer_Review (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER,
    review_text VARCHAR2(1000),
    rating NUMBER,
    review_date TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)
);


--1.Trigger to Prevent booking a room unless it's available
CREATE OR REPLACE TRIGGER trg_prevent_double_booking
BEFORE INSERT ON Booking
FOR EACH ROW
DECLARE
    v_status VARCHAR2(20);
BEGIN
    SELECT room_status INTO v_status FROM Room WHERE room_id = :NEW.room_id;

    IF v_status != 'Available' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Room is not available for booking.');
    END IF;

    -- Mark room as Pending
    UPDATE Room SET room_status = 'Pending' WHERE room_id = :NEW.room_id;
    :NEW.booking_status := 'Booking Confirmation Pending';
END;
/

--2. Trigger to Confirm booking and room after payment
CREATE OR REPLACE TRIGGER trg_confirm_booking_status
AFTER INSERT ON Payment
FOR EACH ROW
BEGIN
    UPDATE Booking SET booking_status = 'Booking Confirmed'
    WHERE booking_id = :NEW.booking_id;

    UPDATE Room SET room_status = 'Confirmed'
    WHERE room_id = (
        SELECT room_id FROM Booking WHERE booking_id = :NEW.booking_id
    );
END;
/


--3.Trigger to Automatically set room status to Available after cancellation
CREATE OR REPLACE TRIGGER trg_reset_room_status_on_cancel
AFTER INSERT ON Cancel_Booking
FOR EACH ROW
DECLARE
    v_room_id NUMBER;
BEGIN
    SELECT room_id INTO v_room_id FROM Booking WHERE booking_id = :NEW.booking_id;

    UPDATE Room SET room_status = 'Available' WHERE room_id = v_room_id;
END;
/


--4. Trigger to Automatically set room status to Available after checkout
CREATE OR REPLACE TRIGGER trg_reset_room_status_on_checkout
AFTER UPDATE ON Booking
FOR EACH ROW
WHEN (NEW.booking_status = 'Checked Out')
BEGIN
    UPDATE Room SET room_status = 'Available'
    WHERE room_id = :NEW.room_id;
END;
/

--5.Trigger to Manage Food Quantity and Total Price
-- ====================

CREATE OR REPLACE TRIGGER trg_handle_food_order
BEFORE INSERT ON Food_Order
FOR EACH ROW
DECLARE
    v_price NUMBER;
    v_stock NUMBER;
BEGIN
    SELECT price, quantity INTO v_price, v_stock FROM Food WHERE food_id = :NEW.food_id;

    IF v_stock < :NEW.quantity THEN
        RAISE_APPLICATION_ERROR(-20002, 'Insufficient food quantity available.');
    END IF;

    -- Calculate total price
    :NEW.total_price := v_price * :NEW.quantity;

    -- Deduct ordered quantity from stock
    UPDATE Food SET quantity = quantity - :NEW.quantity
    WHERE food_id = :NEW.food_id;

    -- Update availability
    UPDATE Food SET is_available = CASE WHEN quantity > 0 THEN 'Y' ELSE 'N' END
    WHERE food_id = :NEW.food_id;
END;
/



--6.Trigger to Calculate Refund Amount Before Inserting Cancel_Booking
-- ====================

CREATE OR REPLACE TRIGGER trg_calculate_refund
BEFORE INSERT ON Cancel_Booking
FOR EACH ROW
DECLARE
    v_checkin_date DATE;
    v_hours_left NUMBER;
    v_total_paid NUMBER;
BEGIN
    SELECT check_in_date INTO v_checkin_date
    FROM Booking
    WHERE booking_id = :NEW.booking_id;

    v_hours_left := (v_checkin_date - :NEW.cancel_date) * 24;

    SELECT NVL(SUM(amount), 0)
    INTO v_total_paid
    FROM Payment
    WHERE booking_id = :NEW.booking_id;

    IF v_hours_left > 48 THEN
        :NEW.refund_amount := v_total_paid * 0.80;
    ELSIF v_hours_left > 24 THEN
        :NEW.refund_amount := v_total_paid * 0.60;
    ELSE
        :NEW.refund_amount := 0;
    END IF;
END;
/



